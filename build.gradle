apply plugin: 'com.android.application'

android {

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {
        tukuze {
            keyAlias 'tukuze'
            keyPassword 'density'
            storeFile file('/Users/ayansolaakanmu/keys/tukuze.jks')
            storePassword 'density'
        }

    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        resolutionStrategy.force 'com.android.support:support-annotations:23.0.1'
    }
    compileSdkVersion 23
    buildToolsVersion '24.0.2'
    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        applicationId "com.mastercard.labs.tukuze_client"
        manifestPlaceholders = [manifestApplicationId          : "${applicationId}",
                                onesignal_app_id               : "8ce5f4fd-c11d-4d86-9450-9d7e10e8b4f4",
                                onesignal_google_project_number: "316019558082"]
        minSdkVersion 18
        targetSdkVersion 23
        versionCode = 464
        versionName = "1.4"

        //buildConfigField "String", "V_CODE", '"' + getVersionCode() + '"'
        //buildConfigField "String", "V_PATH", '"' + projectDir + '"'
        buildConfigField "long", "TIMESTAMP", Calendar.getInstance().get(Calendar.YEAR) + "" + Calendar.getInstance().get(Calendar.MONTH) + "" + Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + "L"
        //Oct 13th 2016 @ 12:48
        //buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "RUN_ON_ROOTED_DEVICE", "true"
        buildConfigField "boolean", "LOAD_CERT", "false"
        buildConfigField "String", "ENVIRONMENT", '"development"'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions("partner", "environmentType")
    productFlavors {
        ekilimo {
            applicationId "com.mastercard.labs.ekilimo_client"
            dimension = "partner"
            signingConfig signingConfigs.tukuze
        }
        tukuze {
            applicationId "com.mastercard.labs.tukuze_client"
            dimension = "partner"
        }
        localHardCoded {
            dimension = "environmentType"
            buildConfigField "String", "SERVER_URL", '"http://10.157.199.173:8080/2kuze/api"'
            buildConfigField "String", "ENVIRONMENT", '"development"'
        }
        emulator {
            dimension = "environmentType"
            buildConfigField 'String', 'SERVER_URL', '"http://10.0.2.2:8080/2kuze/api"'
        }
        local {
            dimension = "environmentType"
            buildConfigField "String", "SERVER_URL", '\"http://' + getLocalIp("en0") + ':8080/2kuze/api\"'
        }
        demo {
            dimension = "environmentType"
            buildConfigField "boolean", "RUN_ON_ROOTED_DEVICE", "false"
            buildConfigField "boolean", "LOAD_CERT", "false"
            buildConfigField "String", "ENVIRONMENT", '"production"'
            buildConfigField 'String', 'SERVER_URL', '"https://demo.labs.mastercard.com/2kuze/api"'
        }
        demo2kuze {
            dimension = "environmentType"
            buildConfigField "boolean", "RUN_ON_ROOTED_DEVICE", "true"
            buildConfigField "boolean", "LOAD_CERT", "false"
            buildConfigField "String", "ENVIRONMENT", '"production"'
            buildConfigField 'String', 'SERVER_URL', '"https://demo.labs.mastercard.com/2kuze/api"'
        }
        demokili {
            dimension = "environmentType"
            buildConfigField "boolean", "RUN_ON_ROOTED_DEVICE", "false"
            buildConfigField "boolean", "LOAD_CERT", "false"
            buildConfigField "String", "ENVIRONMENT", '"production"'
            buildConfigField 'String', 'SERVER_URL', '"https://demo.labs.mastercard.com/2kuzenandi/api"'
            signingConfig signingConfigs.tukuze
        }
        ekiliLive {
            dimension = "environmentType"
            buildConfigField "boolean", "RUN_ON_ROOTED_DEVICE", "false"
            buildConfigField "boolean", "LOAD_CERT", "false"
            buildConfigField "String", "ENVIRONMENT", '"production"'
            buildConfigField 'String', 'SERVER_URL', '"https://www.mastercardlabs.com/kuze/api"'
            signingConfig signingConfigs.tukuze
        }
        farmdemo {
            dimension = "environmentType"
            buildConfigField "boolean", "RUN_ON_ROOTED_DEVICE", "true"
            buildConfigField "boolean", "LOAD_CERT", "false"
            buildConfigField "String", "ENVIRONMENT", '"demo"'
            buildConfigField 'String', 'SERVER_URL', '"https://demo.labs.mastercard.com/farmdemo/api"'
        }
        dev {
            dimension = "environmentType"
            buildConfigField 'String', 'SERVER_URL', '"https://dev.labs.mastercard.com/kuze/api"'
        }
        staging {
            dimension = "environmentType"
            buildConfigField "boolean", "RUN_ON_ROOTED_DEVICE", "true"
            buildConfigField "boolean", "LOAD_CERT", "false"
            buildConfigField "String", "ENVIRONMENT", '"production"'
            buildConfigField 'String', 'SERVER_URL', '"https://demo.labs.mastercard.com/kuze/api"'
        }
        uiTest {
            dimension = "environmentType"
            buildConfigField "String", "SERVER_URL", '\"http://' + getLocalIp("en0") + ':8080/2kuze/api\"'
            minSdkVersion 18
        }
    }
    useLibrary 'org.apache.http.legacy'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'
    compile 'com.android.support:recyclerview-v7:23.0.1'
    compile 'com.android.support:design:23.0.1'
    compile 'com.loopj.android:android-async-http:1.4.6'
    compile 'com.google.api-client:google-api-client-gson:1.20.0'
    compile 'com.onesignal:OneSignal:2.+@aar'
    compile 'com.google.android.gms:play-services-gcm:+'
    compile 'com.google.android.gms:play-services-analytics:+'
    compile 'com.google.android.gms:play-services-location:+'
    compile 'com.crittercism:crittercism-android-agent:+'
    compile 'net.zetetic:android-database-sqlcipher:3.5.4@aar'
    compile 'de.hdodenhof:circleimageview:2.0.0'
    compile 'com.googlecode.libphonenumber:libphonenumber:7.4.0'
    compile 'com.googlecode.libphonenumber:carrier:1.32'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.dlazaro66.qrcodereaderview:qrcodereaderview:2.0.0'
    androidTestCompile 'com.android.support:support-annotations:24.0.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:23.1.1'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2') {
        // Necessary to avoid version conflicts
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
}

// Get the ip address by interface name
def getLocalIp(String interfaceName) {
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    for (NetworkInterface net : interfaces) {
        if (net.name.contains("bridge"))
            continue;
        for (InterfaceAddress address : net.getInterfaceAddresses()) {
            String ip = address.getAddress().getHostAddress()
            println("ip = " + ip)
            if (ip.length() <= 15) {
                return ip;
            }
        }
    }
}

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            //println project.buildscript.sourceFile
            commandLine 'cd', projectDir
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'master'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}